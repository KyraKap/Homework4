[
  {
    "objectID": "KyraKapsaskis_Homework4.html",
    "href": "KyraKapsaskis_Homework4.html",
    "title": "ST558 Homework 4",
    "section": "",
    "text": "to apply a function to every element of a list\n\n\n\nmap()\n\n\n\n\nhelp(lapply)\n\n\n# Making sure to specify  method = \"kendall\" correctly\n# COMMENTING OUT BECAUSE OF THE RENDER NOT WORKING\n\n# lapply(X = my_list, FUN = cor, method = \"kendall\")\n\n# my_function &lt;- function(x, FUN, method) {\n#  lapply(X = my_list, FUN = cor, method = \"kendall\")\n#}\n\n\n\n\nthey are more efficient, less notation/shorter syntax, more consistent than apply\n\n\n\nit doesn’t try to change the data, it just tries to produce something. example is print() or plot(). not a transformation function that changes the data."
  },
  {
    "objectID": "KyraKapsaskis_Homework4.html#what-is-the-purpose-of-lapply",
    "href": "KyraKapsaskis_Homework4.html#what-is-the-purpose-of-lapply",
    "title": "ST558 Homework 4",
    "section": "",
    "text": "to apply a function to every element of a list"
  },
  {
    "objectID": "KyraKapsaskis_Homework4.html#what-is-the-equivalent-purrr-function",
    "href": "KyraKapsaskis_Homework4.html#what-is-the-equivalent-purrr-function",
    "title": "ST558 Homework 4",
    "section": "",
    "text": "map()"
  },
  {
    "objectID": "KyraKapsaskis_Homework4.html#write-the-code-that-would-apply-the-given-function-to-an-entire-list-of-numeric-data-frames-using-the-lapply.",
    "href": "KyraKapsaskis_Homework4.html#write-the-code-that-would-apply-the-given-function-to-an-entire-list-of-numeric-data-frames-using-the-lapply.",
    "title": "ST558 Homework 4",
    "section": "",
    "text": "help(lapply)\n\n\n# Making sure to specify  method = \"kendall\" correctly\n# COMMENTING OUT BECAUSE OF THE RENDER NOT WORKING\n\n# lapply(X = my_list, FUN = cor, method = \"kendall\")\n\n# my_function &lt;- function(x, FUN, method) {\n#  lapply(X = my_list, FUN = cor, method = \"kendall\")\n#}"
  },
  {
    "objectID": "KyraKapsaskis_Homework4.html#what-are-two-advantages-of-using-purrr-functions-instead-of-the-baser-apply-family",
    "href": "KyraKapsaskis_Homework4.html#what-are-two-advantages-of-using-purrr-functions-instead-of-the-baser-apply-family",
    "title": "ST558 Homework 4",
    "section": "",
    "text": "they are more efficient, less notation/shorter syntax, more consistent than apply"
  },
  {
    "objectID": "KyraKapsaskis_Homework4.html#what-is-a-side-effect-function",
    "href": "KyraKapsaskis_Homework4.html#what-is-a-side-effect-function",
    "title": "ST558 Homework 4",
    "section": "",
    "text": "it doesn’t try to change the data, it just tries to produce something. example is print() or plot(). not a transformation function that changes the data."
  },
  {
    "objectID": "KyraKapsaskis_Homework4.html#writing-a-basic-function-called-getrmse-that-takes-in-a-vector-of-responses-a-vector-of-predictions-and-outputs-the-rmse.",
    "href": "KyraKapsaskis_Homework4.html#writing-a-basic-function-called-getrmse-that-takes-in-a-vector-of-responses-a-vector-of-predictions-and-outputs-the-rmse.",
    "title": "ST558 Homework 4",
    "section": "writing a basic function called getRMSE() that takes in a vector of responses, a vector of predictions, and outputs the RMSE.",
    "text": "writing a basic function called getRMSE() that takes in a vector of responses, a vector of predictions, and outputs the RMSE.\n\n# if a value is missing in the responses, allow for additional arguments to the mean() function that removes the NA from the computation\n\n# putting this function here\n\ngetRMSE &lt;- function(vector_obs, vector_pred, ...) {\n  RMSE &lt;- mean((vector_obs - vector_pred)^2, ...) |&gt;\n    sqrt()\n  return(RMSE)\n  \n}"
  },
  {
    "objectID": "KyraKapsaskis_Homework4.html#run-the-following-code",
    "href": "KyraKapsaskis_Homework4.html#run-the-following-code",
    "title": "ST558 Homework 4",
    "section": "run the following code",
    "text": "run the following code\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n\nusing the data that we just created, let’s test the RMSE function that I just made above.\n\ngetRMSE(resp, pred)\n\n[1] 0.9581677\n\n\n\n\nnow test it again but replace two response values with missing values (NA_real_).\n\nprint(resp)\n\n  [1]  7.674144  5.733128  8.637031 12.068788  4.357179  6.040709  4.843093\n  [8]  6.255948  8.512399  7.587703  8.278962  8.221201  3.304767  9.299369\n [15]  7.646876  8.504220  4.254724  5.160568  7.550652 10.115022 12.028134\n [22]  7.723097  9.702653  6.337183  5.568563 11.239175  9.903050  4.965503\n [29]  9.656077  8.081564  8.948798  3.708220  5.410925 12.714925  7.666618\n [36] 10.636295 11.886290 14.767056  8.670500  7.931076  5.338484  5.097557\n [43]  3.213884 11.444994  6.093762  3.192188  1.563749  8.753929  4.177170\n [50] 12.242498  5.781476 12.783701  4.418721  8.442989  4.282396  9.395394\n [57]  8.255719  6.016290  8.026494  9.180810  2.038727  5.273544  7.225220\n [64]  6.654107 12.260485 10.688362  9.773488  8.216967  5.093565  6.142304\n [71]  3.274337  8.547150  9.381826  7.061813  4.016495  7.543794  6.976389\n [78] 11.550401  5.209433  3.872522 13.043037  8.277356  3.231859  8.553664\n [85]  4.576422  2.213665 11.475262  6.469006  5.333390  5.656304  6.209727\n [92]  8.908905  6.956097  9.642321  7.188749 12.413663  6.020730  8.507994\n [99] 11.776177  3.387353\n\n\n\nhelp(replace)\n\n# creating an index vector\nmissing_values &lt;- c(1,2)\n\n\nresp_w_na &lt;- replace(resp, missing_values, NA_real_)\n\n\nprint(resp_w_na)\n\n  [1]        NA        NA  8.637031 12.068788  4.357179  6.040709  4.843093\n  [8]  6.255948  8.512399  7.587703  8.278962  8.221201  3.304767  9.299369\n [15]  7.646876  8.504220  4.254724  5.160568  7.550652 10.115022 12.028134\n [22]  7.723097  9.702653  6.337183  5.568563 11.239175  9.903050  4.965503\n [29]  9.656077  8.081564  8.948798  3.708220  5.410925 12.714925  7.666618\n [36] 10.636295 11.886290 14.767056  8.670500  7.931076  5.338484  5.097557\n [43]  3.213884 11.444994  6.093762  3.192188  1.563749  8.753929  4.177170\n [50] 12.242498  5.781476 12.783701  4.418721  8.442989  4.282396  9.395394\n [57]  8.255719  6.016290  8.026494  9.180810  2.038727  5.273544  7.225220\n [64]  6.654107 12.260485 10.688362  9.773488  8.216967  5.093565  6.142304\n [71]  3.274337  8.547150  9.381826  7.061813  4.016495  7.543794  6.976389\n [78] 11.550401  5.209433  3.872522 13.043037  8.277356  3.231859  8.553664\n [85]  4.576422  2.213665 11.475262  6.469006  5.333390  5.656304  6.209727\n [92]  8.908905  6.956097  9.642321  7.188749 12.413663  6.020730  8.507994\n [99] 11.776177  3.387353\n\n\n\n# same function but with specifying what to do with missing values.\n\ngetRMSE_w_arg &lt;- function(vector_obs, vector_pred, na.rm = TRUE) {\n  RMSE &lt;- mean((vector_obs - vector_pred)^2, na.rm = na.rm) |&gt;\n    sqrt()\n  return(RMSE)\n  \n}\n\n\nrmse_w_na &lt;- getRMSE_w_arg(resp_w_na, pred)\n\n\nprint(rmse_w_na)\n\n[1] 0.9661699\n\n\n\n\nOK now let’s test it again without specifying the behavior for missing values, to see what happens.\n\ngetRMSE(resp_w_na, pred)\n\n[1] NA"
  },
  {
    "objectID": "KyraKapsaskis_Homework4.html#now-create-another-function-following-the-same-specifications-called-getmae",
    "href": "KyraKapsaskis_Homework4.html#now-create-another-function-following-the-same-specifications-called-getmae",
    "title": "ST558 Homework 4",
    "section": "now create another function following the same specifications called getMAE()",
    "text": "now create another function following the same specifications called getMAE()\n\ngetMAE &lt;- function(vector_obs, vector_pred, ...) {\n  MAE &lt;- mean(abs(vector_obs - vector_pred), ...)\n  return(MAE)\n  \n}"
  },
  {
    "objectID": "KyraKapsaskis_Homework4.html#running-some-new-code-to-get-some-new-data",
    "href": "KyraKapsaskis_Homework4.html#running-some-new-code-to-get-some-new-data",
    "title": "ST558 Homework 4",
    "section": "running some new code to get some new data",
    "text": "running some new code to get some new data\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n\ntest the MAE function using this new data that was just created\n\ngetMAE(resp, pred)\n\n[1] 0.8155776\n\n\n\n# creating the new function with specified extra argument\n\ngetMAE_w_arg &lt;- function(vector_obs, vector_pred, na.rm = TRUE) {\n  MAE &lt;- mean(abs(vector_obs - vector_pred), na.rm = na.rm)\n  return(MAE)\n  \n}\n\n\n# data is the same as before\n\nprint(resp_w_na)\n\n  [1]        NA        NA  8.637031 12.068788  4.357179  6.040709  4.843093\n  [8]  6.255948  8.512399  7.587703  8.278962  8.221201  3.304767  9.299369\n [15]  7.646876  8.504220  4.254724  5.160568  7.550652 10.115022 12.028134\n [22]  7.723097  9.702653  6.337183  5.568563 11.239175  9.903050  4.965503\n [29]  9.656077  8.081564  8.948798  3.708220  5.410925 12.714925  7.666618\n [36] 10.636295 11.886290 14.767056  8.670500  7.931076  5.338484  5.097557\n [43]  3.213884 11.444994  6.093762  3.192188  1.563749  8.753929  4.177170\n [50] 12.242498  5.781476 12.783701  4.418721  8.442989  4.282396  9.395394\n [57]  8.255719  6.016290  8.026494  9.180810  2.038727  5.273544  7.225220\n [64]  6.654107 12.260485 10.688362  9.773488  8.216967  5.093565  6.142304\n [71]  3.274337  8.547150  9.381826  7.061813  4.016495  7.543794  6.976389\n [78] 11.550401  5.209433  3.872522 13.043037  8.277356  3.231859  8.553664\n [85]  4.576422  2.213665 11.475262  6.469006  5.333390  5.656304  6.209727\n [92]  8.908905  6.956097  9.642321  7.188749 12.413663  6.020730  8.507994\n [99] 11.776177  3.387353\n\n\n\nMAE_w_na &lt;- getMAE_w_arg(resp_w_na, pred)\n\n\nprint(MAE_w_na)\n\n[1] 0.8241201\n\n\n\ngetMAE_w_arg(resp, pred)\n\n[1] 0.8155776"
  },
  {
    "objectID": "KyraKapsaskis_Homework4.html#creating-a-wrapper-function---a-single-function-call-to-get-either-or-both-metrics.",
    "href": "KyraKapsaskis_Homework4.html#creating-a-wrapper-function---a-single-function-call-to-get-either-or-both-metrics.",
    "title": "ST558 Homework 4",
    "section": "creating a wrapper function - a single function call to get either or both metrics.",
    "text": "creating a wrapper function - a single function call to get either or both metrics.\n\nwrapper_fun &lt;- function(vector_obs, vector_pred, na.rm = TRUE) {\n  getMAE_w_arg(vector_obs, vector_pred, na.rm = TRUE)\n  getRMSE_w_arg(vector_obs, vector_pred, na.rm = TRUE)\n\n}\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n\nwrapper_fun(resp_w_na, pred, TRUE)\n\n[1] 0.9661699\n\n\n\nwrapper_fun(resp, pred, TRUE)\n\n[1] 0.9581677\n\n\n\n# creating a data frame to test the function\n\nresp_as_df &lt;- as.data.frame(resp_w_na)\n\n\n# it doesn't work with a data frame \n\nwrapper_fun(resp_as_df, pred, TRUE)\n\nWarning in mean.default(abs(vector_obs - vector_pred), na.rm = na.rm): argument\nis not numeric or logical: returning NA\n\n\nWarning in mean.default((vector_obs - vector_pred)^2, na.rm = na.rm): argument\nis not numeric or logical: returning NA\n\n\n[1] NA"
  }
]